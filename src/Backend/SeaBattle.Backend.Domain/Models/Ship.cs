namespace SeaBattle.Backend.Domain.Models;

/// <summary>
/// Представляет корабль на игровом поле.
/// </summary>
public class Ship : EntityBase
{
    /// <summary>
    /// ID игрового поля, на котором расположен корабль.
    /// Зачем нужно: Внешний ключ для связи с сущностью Board.
    /// </summary>
    public Guid BoardId { get; set; }

    /// <summary>
    /// Навигационное свойство для игрового поля, на котором расположен корабль.
    /// Зачем нужно: Позволяет EF Core загружать данные Board вместе с Ship.
    /// </summary>
    public Board Board { get; set; } = null!;

    /// <summary>
    /// Тип корабля (определяет его размер).
    /// Зачем нужно: Для определения правил размещения и количества "палуб" корабля.
    /// </summary>
    public ShipType Type { get; set; }

    /// <summary>
    /// Вычисляемое свойство: размер корабля (количество палуб) на основе его типа.
    /// Зачем нужно: Удобное свойство для получения размера корабля без необходимости прямого приведения типа.
    /// </summary>
    public int Size => (int)Type;

    /// <summary>
    /// Начальная координата X (столбец) корабля на поле.
    /// Зачем нужно: Определяет положение корабля.
    /// </summary>
    public int StartX { get; set; }

    /// <summary>
    /// Начальная координата Y (строка) корабля на поле.
    /// Зачем нужно: Определяет положение корабля.
    /// </summary>
    public int StartY { get; set; }

    /// <summary>
    /// Ориентация корабля (горизонтальная или вертикальная).
    /// Зачем нужно: Определяет, как корабль располагается на поле от начальных координат.
    /// </summary>
    public ShipOrientation Orientation { get; set; }

    /// <summary>
    /// Количество попаданий, которые получил корабль.
    /// Зачем нужно: Для отслеживания состояния корабля и определения, когда он потоплен.
    /// </summary>
    public int Hits { get; set; } = 0;

    /// <summary>
    /// Флаг, указывающий, потоплен ли корабль.
    /// Зачем нужно: Для быстрого определения состояния корабля и подсчета оставшихся кораблей игрока.
    /// </summary>
    public bool IsSunk { get; set; } = false;
}

/// <summary>
/// Перечисление типов кораблей и их размеров.
/// </summary>
public enum ShipType
{
    Destroyer = 2,       // Эсминец (2 палубы)
    Cruiser = 3,         // Крейсер (3 палубы)
    Battleship = 4,      // Линкор (4 палубы)
    AircraftCarrier = 5  // Авианосец (5 палуб)
}

/// <summary>
/// Перечисление возможных ориентаций корабля на поле.
/// </summary>
public enum ShipOrientation
{
    Horizontal,
    Vertical
}