namespace SeaBattle.Backend.Domain.Models;

/// <summary>
/// Представляет запись о выстреле по игровому полю.
/// </summary>
public class BoardHit : EntityBase
{
    /// <summary>
    /// ID поля, по которому было совершено попадание.
    /// Зачем нужно: Внешний ключ для связи с сущностью Board.
    /// </summary>
    public Guid BoardId { get; set; }

    /// <summary>
    /// Навигационное свойство для поля, по которому было попадание.
    /// Зачем нужно: Позволяет EF Core загружать данные Board вместе с BoardHit.
    /// </summary>
    public Board Board { get; set; } = null!;

    /// <summary>
    /// Координата X (столбец) выстрела.
    /// Зачем нужно: Определяет точное место на поле, куда был сделан выстрел.
    /// </summary>
    public int X { get; set; }

    /// <summary>
    /// Координата Y (строка) выстрела.
    /// Зачем нужно: Определяет точное место на поле, куда был сделан выстрел.
    /// </summary>
    public int Y { get; set; }

    /// <summary>
    /// Время, когда был сделан выстрел (в формате UTC).
    /// Зачем нужно: Для отслеживания порядка ходов и ведения лога игры.
    /// </summary>
    public DateTime HitTime { get; set; }

    /// <summary>
    /// Флаг, указывающий, был ли это выстрел в корабль (true) или промах (false).
    /// Зачем нужно: Для определения результата выстрела и обновления отображения поля.
    /// </summary>
    public bool IsShipHit { get; set; }

    /// <summary>
    /// ID корабля, если было попадание в корабль (может быть null при промахе).
    /// Зачем нужно: Внешний ключ для связи с сущностью Ship, определяет, какой именно корабль был поражен.
    /// </summary>
    public Guid? HitShipId { get; set; }

    /// <summary>
    /// Навигационное свойство для попавшего корабля (может быть null при промахе).
    /// Зачем нужно: Позволяет EF Core загружать данные Ship вместе с BoardHit.
    /// </summary>
    public Ship? HitShip { get; set; }
}